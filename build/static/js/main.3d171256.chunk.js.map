{"version":3,"sources":["component/Card.js","component/Header.js","component/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","clickCount","id","alt","name","src","image","styles","header","width","fontSize","color","marginBottom","title","float","scores","Header","style","children","score","highscore","wrapper","paddingTop","background","height","display","flexFlow","padding","justifyContent","alignContent","overflow","Wrapper","App","state","friends","gameOver","_this","setState","console","log","this","forEach","card","count","alert","concat","_this2","component_Wrapper","component_Header","map","src_component_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAceA,eARF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAMC,QAAS,kBAAML,EAAMM,WAAWN,EAAMO,MACzDN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,YCPjCC,EAAS,CACXC,OAAQ,CACJC,MAAO,OACPC,SAAU,OACVC,MAAO,UACPC,aAAc,QAGhBC,MAAO,CACLC,MAAO,QAGTC,OAAQ,CACND,MAAO,UAaEE,EATA,SAAArB,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASkB,MAAOV,EAAOC,QACpCZ,EAAAC,EAAAC,cAAA,OAAKmB,MAAOV,EAAOM,MAAOd,UAAU,SAASJ,EAAMuB,SAAnD,KACAtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASkB,MAAOV,EAAOQ,QAAtC,UACUpB,EAAMwB,MADhB,eACmCxB,EAAMyB,aCpBzCH,EAAS,CACXI,QAAS,CACLC,WAAY,OACZC,WAAY,UACZC,OAAQ,OACRC,QAAS,OACTC,SAAU,WACVC,QAAS,OACTC,eAAgB,eAChBC,aAAc,aACdC,SAAU,SAQHC,EAFC,SAAApC,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUkB,MAAOA,EAAMI,SAAU1B,EAAMuB,kBCiDhEc,6MA1DbC,MAAQ,CACNC,UACAf,MAAO,EACPC,UAAW,KAIbe,SAAW,WAWT,OAVIC,EAAKH,MAAMd,MAAQiB,EAAKH,MAAMb,WAChCgB,EAAKC,SAAS,CAACjB,UAAWgB,EAAKH,MAAMd,OAAQ,WAC3CmB,QAAQC,IAAIC,KAAKP,MAAMb,aAG3BgB,EAAKH,MAAMC,QAAQO,QAAQ,SAAAC,GACzBA,EAAKC,MAAQ,IAEfC,MAAK,yBAAAC,OAA0BT,EAAKH,MAAMd,QAC1CiB,EAAKC,SAAS,CAAClB,MAAO,KACf,2EAqBA,IAAA2B,EAAAN,KAEP,OAEE5C,EAAAC,EAAAC,cAACiD,EAAD,KACAnD,EAAAC,EAAAC,cAACkD,EAAD,CAAQ7B,MAAOqB,KAAKP,MAAMd,MAAOC,UAAWoB,KAAKP,MAAMb,WAAvD,iBACCoB,KAAKP,MAAMC,QAAQe,IAAI,SAAAP,GAAI,OAC1B9C,EAAAC,EAAAC,cAACoD,EAAD,CACEjD,WAAY6C,EAAK7C,WACjBC,GAAIwC,EAAKxC,GACTiD,IAAKT,EAAKxC,GACVI,MAAOoC,EAAKpC,kBAnDJ8C,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3d171256.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\n\n\n\nconst Card = props => (\n  <div className=\"card\"onClick={() => props.clickCount(props.id)}>\n    <div className=\"img-container\" >\n      <img alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default Card;","import React from \"react\";\n\nconst styles = {\n    header: {\n        width: \"100%\",\n        fontSize: \"2rem\",\n        color: \"#2A77AE\",\n        marginBottom: \"10px\"\n      },\n      \n      title: {\n        float: \"left\"\n      },\n      \n      scores: {\n        float: \"right\"\n      }\n  };\n\n  const Header = props => (\n    <div className=\"header\" style={styles.header}>\n      <div style={styles.title} className=\"title\">{props.children} </div>\n      <div className=\"scores\" style={styles.scores}>\n        Score: {props.score} Highscore: {props.highscore}\n      </div>\n    </div>\n  );\n  \n  export default Header;\n","import React from \"react\";\n\n\nconst style =  {\n    wrapper: {\n        paddingTop: \"50px\",\n        background: \"#ECEFF1\",\n        height: \"100%\",\n        display: \"flex\",\n        flexFlow: \"row wrap\",\n        padding: \"20px\",\n        justifyContent: \"space-around\",\n        alignContent: \"flex-start\",\n        overflow: \"auto\"\n      }\n}\n\n\n\nconst Wrapper = props => <div className=\"wrapper\" style={style.wrapper}>{props.children}</div>;\n\nexport default Wrapper;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Card from \"./component/Card\";\nimport Header from \"./component/Header\";\nimport Wrapper from \"./component/Wrapper\";\nimport friends from \"./friends.json\";\n\n\nclass App extends Component {\n  state = {\n    friends,\n    score: 0,\n    highscore: 0\n\n  }\n\n  gameOver = () => {\n    if (this.state.score > this.state.highscore) {\n      this.setState({highscore: this.state.score}, function() {\n        console.log(this.state.highscore);\n      });\n    }\n    this.state.friends.forEach(card => {\n      card.count = 0;\n    });\n    alert(`Game Over :( \\nscore: ${this.state.score}`);\n    this.setState({score: 0});\n    return true;\n  }\n\n  // clickCount = id => {\n  //   this.state.friends.find((o, i) => {\n  //     if (o.id === id) {\n  //       if(friends[i].count === 0){\n  //         friends[i].count = friends[i].count + 1;\n  //         this.setState({score : this.state.score + 1}, function(){\n  //           console.log(this.state.score);\n  //         });\n  //         this.state.friends.sort(() => Math.random() - 0.5)\n  //         return true; \n  //       } else {\n  //         this.gameOver();\n  //       }\n  //     }\n  //   });\n  // }\n\n\n  render() {\n\n    return (\n\n      <Wrapper>\n      <Header score={this.state.score} highscore={this.state.highscore}>Clicky Game  </Header>\n      {this.state.friends.map(card => (\n        <Card\n          clickCount={this.clickCount}\n          id={card.id}\n          key={card.id}\n          image={card.image}\n        />\n      ))}\n    </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}